
services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: cdc_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-engagement_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: postgres -c wal_level=logical -c max_replication_slots=4 -c max_wal_senders=4
    networks:
      - cdc_network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: cdc_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - cdc_network

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: cdc_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: ${KAFKA_SCHEMA_REGISTRY_URL:-http://schema-registry:8081}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 16
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - cdc_network

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: cdc_schema_registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - cdc_network

  # Kafka Connect with Debezium
  connect:
    image: debezium/connect:2.4
    container_name: cdc_connect
    depends_on:
      - kafka
      - postgres
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_status
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
    networks:
      - cdc_network

  # Redis for real-time caching
  redis:
    image: redis:7-alpine
    container_name: cdc_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - cdc_network

  # Flink JobManager
  jobmanager:
    image: flink:1.17-scala_2.12-java11
    container_name: cdc_jobmanager
    ports:
      - "8080:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        parallelism.default: ${FLINK_PARALLELISM:-16}
        taskmanager.memory.process.size: ${FLINK_TASKMANAGER_MEMORY:-4096m}
        taskmanager.memory.flink.size: 2048m
        taskmanager.numberOfTaskSlots: 4
        execution.checkpointing.interval: ${FLINK_CHECKPOINT_INTERVAL:-30s}
        execution.checkpointing.mode: EXACTLY_ONCE
        state.backend: filesystem
        state.checkpoints.dir: file:///tmp/flink-checkpoints
        restart-strategy: exponential-delay
        restart-strategy.exponential-delay.initial-backoff: 1s
        restart-strategy.exponential-delay.max-backoff: 10min
        restart-strategy.exponential-delay.backoff-multiplier: 1.1
        restart-strategy.exponential-delay.reset-backoff-threshold: 5min
    volumes:
      - flink_data:/tmp/flink-checkpoints
    networks:
      - cdc_network

  # Flink TaskManager
  taskmanager:
    image: flink:1.17-scala_2.12-java11
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 4
        taskmanager.memory.process.size: ${FLINK_TASKMANAGER_MEMORY:-4096m}
        taskmanager.memory.flink.size: 2048m
    volumes:
      - flink_data:/tmp/flink-checkpoints
    networks:
      - cdc_network

  # Data Generator Service
  data-generator:
    build:
      context: ./data-generator
      dockerfile: Dockerfile
    container_name: cdc_data_generator
    depends_on:
      - postgres
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-engagement_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      GENERATION_RATE: ${GENERATION_RATE:-200000}
      BURST_MODE: ${BURST_MODE:-false}
      BURST_COUNT: ${BURST_COUNT:-100000}
    networks:
      - cdc_network

volumes:
  postgres_data:
  kafka_data:
  redis_data:
  flink_data:

networks:
  cdc_network:
    driver: bridge